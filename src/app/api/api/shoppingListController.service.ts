/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { Item } from '../model/item';
import { ShoppingList } from '../model/shoppingList';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class ShoppingListControllerService {

    protected basePath = 'http://localhost:5000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param shoppingListId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addItem(body: Item, shoppingListId: number, observe?: 'body', reportProgress?: boolean): Observable<ShoppingList>;
    public addItem(body: Item, shoppingListId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ShoppingList>>;
    public addItem(body: Item, shoppingListId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ShoppingList>>;
    public addItem(body: Item, shoppingListId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addItem.');
        }

        if (shoppingListId === null || shoppingListId === undefined) {
            throw new Error('Required parameter shoppingListId was null or undefined when calling addItem.');
        }

        let headers = this.defaultHeaders;

        const valami = JSON.parse(localStorage.getItem('user')!)

        headers = this.defaultHeaders;

        headers = headers.set('Authorization', `${valami.token}`);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ShoppingList>('post', `${this.basePath}/api/shoppinglist/additem/${encodeURIComponent(String(shoppingListId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createShoppingList(body: ShoppingList, observe?: 'body', reportProgress?: boolean): Observable<ShoppingList>;
    public createShoppingList(body: ShoppingList, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ShoppingList>>;
    public createShoppingList(body: ShoppingList, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ShoppingList>>;
    public createShoppingList(body: ShoppingList, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createShoppingList.');
        }

        let headers = this.defaultHeaders;

        const valami = JSON.parse(localStorage.getItem('user')!)

        headers = this.defaultHeaders;

        headers = headers.set('Authorization', `${valami.token}`);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ShoppingList>('post', `${this.basePath}/api/shoppinglist/createlist`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteItem(id: number, observe?: 'body', reportProgress?: boolean): Observable<ShoppingList>;
    public deleteItem(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ShoppingList>>;
    public deleteItem(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ShoppingList>>;
    public deleteItem(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteItem.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ShoppingList>('delete', `${this.basePath}/api/shoppinglist/deleteitem/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteShoppingList(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteShoppingList(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteShoppingList(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteShoppingList(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteShoppingList.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete', `${this.basePath}/api/shoppinglist/deletelist/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActualShoppingLists(observe?: 'body', reportProgress?: boolean): Observable<Array<ShoppingList>>;
    public getActualShoppingLists(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ShoppingList>>>;
    public getActualShoppingLists(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ShoppingList>>>;
    public getActualShoppingLists(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        const jwt = localStorage.getItem('user');

        const valami = JSON.parse(localStorage.getItem('user')!)

        let headers = this.defaultHeaders;

        headers = headers.set('Authorization', `${valami.token}`);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ShoppingList>>('get', `${this.basePath}/api/shoppinglist/getActualLists`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAlreadyPaidShoppingLists(observe?: 'body', reportProgress?: boolean): Observable<Array<ShoppingList>>;
    public getAlreadyPaidShoppingLists(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ShoppingList>>>;
    public getAlreadyPaidShoppingLists(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ShoppingList>>>;
    public getAlreadyPaidShoppingLists(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        const jwt = localStorage.getItem('user');

        const valami = JSON.parse(localStorage.getItem('user')!)

        let headers = this.defaultHeaders;

        headers = headers.set('Authorization', `${valami.token}`);


        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ShoppingList>>('get', `${this.basePath}/api/shoppinglist/getPaidLists`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItems(id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Item>>;
    public getItems(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Item>>>;
    public getItems(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Item>>>;
    public getItems(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getItems.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Item>>('get', `${this.basePath}/api/shoppinglist/getitems/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getShoppingLists(observe?: 'body', reportProgress?: boolean): Observable<Array<ShoppingList>>;
    public getShoppingLists(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ShoppingList>>>;
    public getShoppingLists(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ShoppingList>>>;
    public getShoppingLists(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        const jwt = localStorage.getItem('user');

        const valami = JSON.parse(localStorage.getItem('user')!)

        let headers = this.defaultHeaders;

        headers = headers.set('Authorization', `${valami.token}`);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ShoppingList>>('get', `${this.basePath}/api/shoppinglist/getlists`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public markItemsAsPurchased(body?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<Array<Item>>;
    public markItemsAsPurchased(body?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Item>>>;
    public markItemsAsPurchased(body?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Item>>>;
    public markItemsAsPurchased(body?: Array<number>, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<Item>>('post', `${this.basePath}/api/shoppinglist/mark-as-purchased`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param shoppingListId 
     * @param item 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateItem(shoppingListId: number, item: Item, observe?: 'body', reportProgress?: boolean): Observable<Array<Item>>;
    public updateItem(shoppingListId: number, item: Item, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Item>>>;
    public updateItem(shoppingListId: number, item: Item, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Item>>>;
    public updateItem(shoppingListId: number, item: Item, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (shoppingListId === null || shoppingListId === undefined) {
            throw new Error('Required parameter shoppingListId was null or undefined when calling updateItem.');
        }

        if (item === null || item === undefined) {
            throw new Error('Required parameter item was null or undefined when calling updateItem.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (item !== undefined && item !== null) {
            queryParameters = queryParameters.set('item', <any>item);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Item>>('get', `${this.basePath}/api/shoppinglist/updateitem/${encodeURIComponent(String(shoppingListId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateShoppingList(body: ShoppingList, observe?: 'body', reportProgress?: boolean): Observable<ShoppingList>;
    public updateShoppingList(body: ShoppingList, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ShoppingList>>;
    public updateShoppingList(body: ShoppingList, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ShoppingList>>;
    public updateShoppingList(body: ShoppingList, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateShoppingList.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ShoppingList>('post', `${this.basePath}/api/shoppinglist/updatelist`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateShoppingList1(id: number, observe?: 'body', reportProgress?: boolean): Observable<ShoppingList>;
    public updateShoppingList1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ShoppingList>>;
    public updateShoppingList1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ShoppingList>>;
    public updateShoppingList1(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateShoppingList1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ShoppingList>('post', `${this.basePath}/api/shoppinglist/paid/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
